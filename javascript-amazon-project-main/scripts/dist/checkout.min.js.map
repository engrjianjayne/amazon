{"version":3,"sources":["checkout.js"],"names":["_orderSummary","require","_paymentSummary","_products","_cart","loadPage","regeneratorRuntime","async","_context","prev","next","awrap","loadProductsFetch","Promise","resolve","reject","loadCart","sent","t0","console","log","renderOrderSummary","renderPaymentSummary","stop"],"mappings":"aAAA,IAAAA,cAAAC,QAAA,8BACAC,gBAAAD,QAAA,gCADAE,UAAAF,QAAA,uBAGAG,MAAAH,QAAA,mBAIA,SAAeI,WAAf,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,OAFA,EAAAR,UAAAS,sBAEA,KAAA,EAAA,OAAAJ,EAAAE,KAAA,EAAAJ,mBAAAK,MAAA,IAAAE,QAAA,SAAAC,EAAAC,IAAA,EAAAX,MAAAY,UAAA,WAAAF,EAAA,eAAA,KAAA,EAAAN,EAAAS,KAAAT,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,MAAA,GAAAW,QAAAC,IAAA,6CAAA,KAAA,IAOM,EAAApB,cAAAqB,uBACC,EAAAnB,gBAAAoB,wBARP,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAe,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAWQlB","file":"checkout.min.js","sourcesContent":["import {renderOrderSummary} from './checkout/orderSummary.js';\r\nimport {renderPaymentSummary} from './checkout/paymentSummary.js';\r\nimport { loadProducts, loadProductsFetch } from '../data/products.js';\r\nimport { loadCart } from '../data/cart.js';\r\n// import '../data/cart-class.js';\r\n// import '../data/backend-practice.js';\r\n\r\nasync function loadPage() {\r\n  try {\r\n   // throw 'error1';\r\n\r\n    await loadProductsFetch();\r\n\r\n    const value = await new Promise((resolve, reject) => {\r\n      //throw 'error2';\r\n       loadCart(() => {\r\n        // reject('error3');\r\n        resolve('value3');\r\n       });\r\n     });\r\n\r\n  } catch (error) {\r\n    console.log('Unexpected error. Please try again later.');\r\n  } \r\n\r\n  renderOrderSummary();\r\n  renderPaymentSummary();\r\n\r\n}\r\nloadPage();\r\n\r\n/*\r\nPromise.all([\r\n  loadProductsFetch(),\r\n  new Promise((resolve) => {\r\n    loadCart(() => {\r\n      resolve();\r\n    });\r\n  })\r\n\r\n]).then((values) =>{\r\n  console.log(values);\r\n  renderOrderSummary();\r\n  renderPaymentSummary();\r\n});\r\n*/\r\n\r\n/*\r\nnew Promise((resolve) => {\r\n  loadProducts(() => {\r\n    resolve('value1');\r\n  });\r\n\r\n}).then((value) => {\r\n  console.log(value);\r\n\r\n  return new Promise((resolve) => {\r\n    loadCart(() => {\r\n      resolve();\r\n    });\r\n  });\r\n\r\n}).then(() => {\r\n  renderOrderSummary();\r\n  renderPaymentSummary();\r\n});\r\n*/\r\n\r\n\r\n/*\r\nloadProducts(() => {\r\n  loadCart(() => {\r\n    renderOrderSummary();\r\n    renderPaymentSummary();\r\n  });\r\n});\r\n*/"]}